using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Text;
using System.Web;

public class MSEDClass
{
    public List<Cookie> ListCookiesChrome = new List<Cookie>();
    public string MainUrl = "https://edms.permkrai.ru";
    public string httpLocation = "";
    public string ResponseURI = "";
    public string valDNSID = "";
    public string valAction = "";

    public string id_recepient = "";
    public string name_recepient = "";

    private class MSEDfileInfo
    {
        public string FullFileName;
        public string fileName;
        public string MSEDfileName;
    }


    public string UTF8ToWin1251(string sourceStr)
    {
        Encoding utf8 = Encoding.UTF8;
        Encoding win1251 = Encoding.GetEncoding("windows-1251");

        byte[] utf8Bytes = utf8.GetBytes(sourceStr);
        byte[] win1251Bytes = Encoding.Convert(utf8, win1251, utf8Bytes);
        return win1251.GetString(win1251Bytes);
    }
    public byte[] UTF8ToWin1251Byte(string sourceStr)
    {
        Encoding utf8 = Encoding.UTF8;
        Encoding win1251 = Encoding.GetEncoding("windows-1251");

        byte[] utf8Bytes = utf8.GetBytes(sourceStr);
        byte[] win1251Bytes = Encoding.Convert(utf8, win1251, utf8Bytes);
        return win1251Bytes;
    }

    public string Win1251ToUTF8(string source)
    {

        Encoding utf8 = Encoding.GetEncoding("utf-8");
        Encoding win1251 = Encoding.GetEncoding("windows-1251");

        byte[] utf8Bytes = win1251.GetBytes(source);
        byte[] win1251Bytes = Encoding.Convert(win1251, utf8, utf8Bytes);
        source = win1251.GetString(win1251Bytes);
        return source;

    }

    public void AddCookiesToRequest(ref HttpWebRequest request, string Domain = "")
    {
        if (ListCookiesChrome.Count > 0)
        {
            foreach (Cookie cc in ListCookiesChrome)
            {
                if ((Domain == "") || (cc.Domain == Domain))
                {
                    System.Net.Cookie cc1 = new System.Net.Cookie(cc.Name, cc.Value, cc.Path, cc.Domain);
                    request.CookieContainer.Add(cc1);
                }
            }
        }
    }
    public void SaveCookiesFromRequest(HttpWebResponse response)
    {
        //ListCookiesChrome.Clear();
        foreach (Cookie c in response.Cookies)
        {
            int CookieExists = -1;
            for (int i = 0; i < ListCookiesChrome.Count; i++)
            {
                Cookie c1 = ListCookiesChrome[i];
                if ((c1.Name == c.Name) && (c1.Path == c.Path) && (c1.Domain == c.Domain))
                {
                    CookieExists = i;
                    break;
                }
            }
            if (CookieExists >= 0)
            {
                ListCookiesChrome[CookieExists] = c;
            }
            else
            {
                ListCookiesChrome.Add(c);
            }
        }
        Cookie cc = new Cookie("menu_item_1", "1", "/", "edms.permkrai.ru");
        ListCookiesChrome.Add(cc);
    }

    public void UpdateDNSID(string resp)
    {
        string form = resp;

        if (form.IndexOf("<form") >= 0)
        {
            form = form.Substring(resp.IndexOf("<form"));
            int p = form.IndexOf(">");
            form = form.Substring(1, p);
            if (form.IndexOf("action") >= 0)
            {
                string rzd = form.Substring(form.IndexOf("action=") + 7, 1);
                valAction = form.Substring(form.IndexOf("action=") + 8);
                valAction = valAction.Substring(0, valAction.IndexOf(rzd));
            }
        }


        while (resp.IndexOf("<input") >= 0)
        {
            resp = resp.Substring(resp.IndexOf("<input"));
            int p = resp.IndexOf(">");
            string tagInput = resp.Substring(0, p);
            resp = resp.Substring(p + 1);
            if (tagInput.IndexOf("DNSID") >= 0)
            {
                string rzd = tagInput.Substring(tagInput.IndexOf("value=") + 6, 1);
                valDNSID = tagInput.Substring(tagInput.IndexOf("value=") + 7);
                valDNSID = valDNSID.Substring(0, valDNSID.IndexOf(rzd));
            }
        }

    }

    public string Post(string url, string param, out string status, bool json = false, bool SaveCookies = false, string Domain = "", bool ReLogin = true)
    {
        string result = "";
        status = "";
        try
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Timeout = 3600000;
            request.Method = "POST";
            request.AllowAutoRedirect = false;
            request.CookieContainer = new CookieContainer();
            AddCookiesToRequest(ref request, Domain);

            string postData = param;
            byte[] byteArray = Encoding.UTF8.GetBytes(postData);
            if (json)
                request.ContentType = "application/json;charset=utf-8";
            else
                request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            Stream dataStream = request.GetRequestStream();
            dataStream.Write(byteArray, 0, byteArray.Length);
            dataStream.Close();


            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            string[] gloc = response.Headers.GetValues("Location");
            if (gloc != null)
            {
                httpLocation = gloc[0];
            }
            else
            {
                httpLocation = "";
            }
            if (SaveCookies)
            {
                SaveCookiesFromRequest(response);
            }

            dataStream = response.GetResponseStream();
            StreamReader reader = new StreamReader(dataStream);
            string responseFromServer = reader.ReadToEnd();
            reader.Close();
            dataStream.Close();
            response.Close();

            status = response.StatusCode + ": " + response.StatusDescription;
            result = responseFromServer;
        }
        catch (WebException e)
        {
            HttpWebResponse errRsp = (HttpWebResponse)e.Response;
            if (errRsp != null)
            {
                status = errRsp.StatusCode.ToString() + ": " + errRsp.StatusDescription;
                result = "";
                if (SaveCookies)
                {
                    SaveCookiesFromRequest((HttpWebResponse)e.Response);
                }
            }
            else
            {

            }
        }
        return result;
    }
    public string Get(string url, out string status, bool SaveCookies = false, bool ReLogin = true, string Domain = "", string ContentType = "")
    {
        string result = "";
        try
        {

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.UserAgent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/66.0.3359.139 Chrome/66.0.3359.139 Safari/537.36";
            request.Method = "GET";
            request.Timeout = 3600000;

            request.CookieContainer = new CookieContainer();
            AddCookiesToRequest(ref request, Domain);
            if (ContentType != "")
            {
                request.ContentType = ContentType;
            }
            request.Headers.Add("TE: Trailers");
            request.Referer = MainUrl + "/document.card.php?category=1&DNSID=" + valDNSID;
            request.AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip;
            HttpWebResponse httpResponse = (HttpWebResponse)request.GetResponse();
            ResponseURI = httpResponse.ResponseUri.ToString();
            string[] gloc = httpResponse.Headers.GetValues("Location");
            if (gloc != null)
            {
                httpLocation = gloc[0];
            }
            else
            {
                httpLocation = "";
            }
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream(), Encoding.GetEncoding("windows-1251")))
            {
                result = streamReader.ReadToEnd();
            }
            if (SaveCookies)
            {
                SaveCookiesFromRequest(httpResponse);
            }
            status = httpResponse.StatusCode + ": " + httpResponse.StatusDescription;
        }
        catch (WebException e)
        {
            HttpWebResponse errRsp = (HttpWebResponse)e.Response;
            status = errRsp.StatusCode.ToString() + ": " + errRsp.StatusDescription;
            result = "";
            if (SaveCookies)
            {
                SaveCookiesFromRequest((HttpWebResponse)e.Response);
            }

        }
        return result;
    }

    public void Login(string user, string pswd)
    {
        string stat = "";
        string Resp = Get(MainUrl, out stat);

        if (ResponseURI.IndexOf("auth.php") >= 0)
        {
            UpdateDNSID(Resp);
            string param = "DNSID=" + valDNSID + "&group_id=70586&login=&login=" + HttpUtility.UrlEncode(UTF8ToWin1251(user)) + "&user_id=173511&password=" + pswd + "&x=1";
            string http_url = MainUrl + "/auth.php?group_id=70586";
            Resp = Post(http_url, param, out stat, false, true);
        }

    }
    public string UploadFile(string url, string[] files, out string stats)
    {
        string result = "";
        string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");
        //            string boundary = "---------------------------36220862914798719142890179404";
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.CookieContainer = new CookieContainer();
        AddCookiesToRequest(ref request, "");
        request.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
        request.ContentType = "multipart/form-data; boundary=" + boundary;
        request.UserAgent = " Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36";
        request.AllowAutoRedirect = true;
        request.KeepAlive = true;
        request.Headers.Add("Accept-Encoding: gzip,deflate");
        request.Headers.Add("Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4");
        request.Method = "POST";
        MemoryStream requestStream = new MemoryStream();

        StringBuilder sb = new StringBuilder();

        byte[] stri = Encoding.UTF8.GetBytes(Environment.NewLine);
        //            byte[] stri = Encoding.GetEncoding("windows-1251").GetBytes(Environment.NewLine);

        for (int i = 0; i < files.Length; i++)
        {
            if (File.Exists(files[i]))
            {
                string CType = "application/octet-stream";
                //                        string tFile = "file";
                string tFile = "f";
                if (Path.GetExtension(files[i]).ToUpper() == ".PDF")
                {
                    CType = "application/pdf";
                }
                if (Path.GetExtension(files[i]).ToUpper() == ".XML")
                {
                    CType = "text/xml";
                }

                sb.Clear();
                sb.AppendLine("--" + boundary);
                sb.AppendLine("Content-Disposition: form-data; name=\"" + tFile + "\"; filename=\"" + Path.GetFileName(files[i]) + "\"");
                sb.AppendLine("Content-Type: " + CType);
                sb.AppendLine("");
                //                        byte[] hFile = Encoding.GetEncoding("windows-1251").GetBytes(UTF8ToWin1251(sb.ToString()));
                byte[] hFile = Encoding.UTF8.GetBytes(sb.ToString());
                byte[] bFile = File.ReadAllBytes(files[i]);
                requestStream.Write(hFile, 0, hFile.Length);
                requestStream.Write(bFile, 0, bFile.Length);
                requestStream.Write(stri, 0, stri.Length);
            }
        }

        //                byte[] str2e = Encoding.GetEncoding("windows-1251").GetBytes(UTF8ToWin1251("--" + boundary + "--")); //Encoding.UTF8.GetBytes("--" + boundary + "--");
        byte[] str2e = Encoding.UTF8.GetBytes("--" + boundary + "--");
        requestStream.Write(str2e, 0, str2e.Length);
        requestStream.Write(stri, 0, stri.Length);

        request.ContentLength = requestStream.Length;
        Stream RStream = request.GetRequestStream();
        requestStream.Position = 0;
        byte[] tempBuffer = new byte[requestStream.Length];
        requestStream.Read(tempBuffer, 0, tempBuffer.Length);
        requestStream.Close();
        RStream.Write(tempBuffer, 0, tempBuffer.Length);
        RStream.Close();

        try
        {
            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                Stream dataStream = response.GetResponseStream();
                GZipStream responseStream = new GZipStream(dataStream, CompressionMode.Decompress);
                StreamReader reader = new StreamReader(responseStream);
                string responseFromServer = reader.ReadToEnd();
                reader.Close();
                dataStream.Close();
                response.Close();
                stats = response.StatusCode + ": " + response.StatusDescription;
                result = responseFromServer;
            }
        }
        catch (WebException ex)
        {
            stats = ex.Message;
            result = "";
        }
        return result;

    }
    public string SendDoc(string url, string[,] FormData, out string stats)
    {
        string result = "";
        string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");
        //            string boundary = "---------------------------36220862914798719142890179404";
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.CookieContainer = new CookieContainer();
        AddCookiesToRequest(ref request, "");
        request.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
        request.ContentType = "multipart/form-data; boundary=" + boundary;
        request.UserAgent = " Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36";
        request.AllowAutoRedirect = false;
        request.KeepAlive = true;
        request.Headers.Add("Accept-Encoding: gzip,deflate");
        request.Headers.Add("Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4");
        request.Method = "POST";
        MemoryStream requestStream = new MemoryStream();


        StringBuilder sb = new StringBuilder();

        //            int ContentLength = 0;
        //byte[] stri = Encoding.UTF8.GetBytes(Environment.NewLine);
        byte[] stri = Encoding.GetEncoding("windows-1251").GetBytes(Environment.NewLine);

        for (int i = 0; i < FormData.GetLength(0); i++)
        {
            sb.AppendLine("--" + boundary);
            sb.AppendLine("Content-Disposition: form-data; name=\"" + FormData[i, 0] + "\"");
            sb.AppendLine("");
            sb.AppendLine(FormData[i, 1]);
        }
        //byte[] nach = Encoding.UTF8.GetBytes(sb.ToString());
        byte[] nach = UTF8ToWin1251Byte(sb.ToString());
        requestStream.Write(nach, 0, nach.Length);
        //requestStream.Write(stri, 0, stri.Length);

        byte[] str2e = Encoding.GetEncoding("windows-1251").GetBytes(UTF8ToWin1251("--" + boundary + "--")); //Encoding.UTF8.GetBytes("--" + boundary + "--");
                                                                                                             //byte[] str2e = Encoding.UTF8.GetBytes("--" + boundary + "--");
        requestStream.Write(str2e, 0, str2e.Length);
        requestStream.Write(stri, 0, stri.Length);

        request.ContentLength = requestStream.Length;
        Stream RStream = request.GetRequestStream();
        requestStream.Position = 0;
        byte[] tempBuffer = new byte[requestStream.Length];
        requestStream.Read(tempBuffer, 0, tempBuffer.Length);
        requestStream.Close();
        RStream.Write(tempBuffer, 0, tempBuffer.Length);
        RStream.Close();
        File.WriteAllBytes("d:\\test\\msed\\REQ.txt", tempBuffer);


        try
        {

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {

                string[] gloc = response.Headers.GetValues("Location");
                if (gloc != null)
                {
                    httpLocation = gloc[0];
                }
                else
                {
                    httpLocation = "";
                }

                Stream dataStream = response.GetResponseStream();
                GZipStream responseStream = new GZipStream(dataStream, CompressionMode.Decompress);
                StreamReader reader = new StreamReader(responseStream);
                string responseFromServer = reader.ReadToEnd();
                reader.Close();
                dataStream.Close();
                response.Close();
                stats = response.StatusCode + ": " + response.StatusDescription;
                result = responseFromServer;
            }
        }
        catch (WebException ex)
        {
            stats = ex.Message;
            result = "";
        }
        return result;

    }
    public string SendMIVRequest(string id_recepient, string name_recepient, string NumMV, string textDoc, string[] files)
    {

        try
        {
            string stats = "";
            string Resp = Get(MainUrl + "/web/?DNSID=" + valDNSID + "&url=multiuploader/getdir&dir=", out stats);

            JObject json = JObject.Parse(Resp);
            //"{"state":true,"data":{"dir":"RJIxM2YUFQ","removed":true}}"
            if (json["state"].ToString().ToLower() != "true") return "error";
            string dir = json["data"]["dir"].ToString();
            List<MSEDfileInfo> MSF = new List<MSEDfileInfo>();

            foreach (string sfile in files)
            {
                string[] PDFfiles = new string[1];
                PDFfiles[0] = sfile;
                Resp = UploadFile(MainUrl + "/web/?DNSID=" + valDNSID + "&url=multiuploader/add&tmp=" + dir, PDFfiles, out stats);
                json = JObject.Parse(Resp);
                if (json["state"].ToString().ToLower() != "true") return "error";

                MSEDfileInfo MFI = new MSEDfileInfo();
                MFI.FullFileName = sfile;
                MFI.fileName = Path.GetFileName(sfile);
                MFI.MSEDfileName = json["data"]["filename"].ToString();
                MSF.Add(MFI);
            }
            string[,] FormData = new string[41, 2];

            FormData[0, 0] = "ignore_nc_orgs";
            FormData[0, 1] = "";

            FormData[1, 0] = "comment";
            FormData[1, 1] = "";

            FormData[2, 0] = "nomenclature_unit_id";
            FormData[2, 1] = "";

            FormData[3, 0] = "out_number[0]";
            FormData[3, 1] = NumMV;

            FormData[4, 0] = "out_date[0]";
            FormData[4, 1] = DateTime.Now.ToString("dd.MM.yyyy");

            FormData[5, 0] = "acting_author[0]";
            FormData[5, 1] = "";

            FormData[6, 0] = "acting_post_hier[0]";
            FormData[6, 1] = "";

            FormData[7, 0] = "to[a][0]";
            FormData[7, 1] = "173511";

            FormData[8, 0] = "inv_to[a][0]";
            FormData[8, 1] = "NaN";

            FormData[9, 0] = "inp_g_su_a_0";
            FormData[9, 1] = "";

            FormData[10, 0] = "prepared_by";
            FormData[10, 1] = "173511";

            FormData[11, 0] = "inv_prepared_by";
            FormData[11, 1] = "0";

            FormData[12, 0] = "inp_SuPreparedBy";
            FormData[12, 1] = "Мачинская В.О.";

            FormData[13, 0] = "inv_to[r][0]";
            FormData[13, 1] = "NaN";

            FormData[14, 0] = "inp_g_su_r_0";
            FormData[14, 1] = name_recepient;

            FormData[15, 0] = "sheet_count";
            FormData[15, 1] = "1+0+1";

            FormData[16, 0] = "document_kind";
            FormData[16, 1] = "3083";

            FormData[17, 0] = "delivery_type";
            FormData[17, 1] = "12";

            FormData[18, 0] = "short_content";
            FormData[18, 1] = textDoc;

            FormData[19, 0] = "classifier_id";
            FormData[19, 1] = "";

            FormData[20, 0] = "memo";
            FormData[20, 1] = "";

            FormData[21, 0] = "info";
            FormData[21, 1] = "";

            FormData[22, 0] = "info_date";
            FormData[22, 1] = "";

            FormData[23, 0] = "info_author";
            FormData[23, 1] = "0";

            FormData[24, 0] = "inv_info_author";
            FormData[24, 1] = "0";

            FormData[25, 0] = "inp_SuInfoAuthor";
            FormData[25, 1] = "";

            FormData[26, 0] = "mu_files_in[data][0][id]";
            FormData[26, 1] = "";

            FormData[27, 0] = "mu_files_in[data][0][name]";
            FormData[27, 1] = MSF[0].fileName;

            FormData[28, 0] = "mu_files_in[data][0][filename]";
            FormData[28, 1] = MSF[0].MSEDfileName;

            FormData[29, 0] = "mu_files_in[data][0][originalName]";
            FormData[29, 1] = MSF[0].fileName;

            FormData[30, 0] = "mu_files_in[data][0][createPages]";
            FormData[30, 1] = "1";

            FormData[31, 0] = "mu_files_in[data][1][id]";
            FormData[31, 1] = "";

            FormData[32, 0] = "mu_files_in[data][1][name]";
            FormData[32, 1] = MSF[1].fileName;

            FormData[33, 0] = "mu_files_in[data][1][filename]";
            FormData[33, 1] = MSF[1].MSEDfileName;

            FormData[34, 0] = "mu_files_in[data][1][originalName]";
            FormData[34, 1] = MSF[1].fileName;

            FormData[35, 0] = "mu_files_in[data][1][createPages]";
            FormData[35, 1] = "0";

            FormData[36, 0] = "mu_files_in[dir]";
            FormData[36, 1] = dir;

            FormData[37, 0] = "override_pages";
            FormData[37, 1] = "0";

            FormData[38, 0] = "page_action_comment";
            FormData[38, 1] = "";

            FormData[39, 0] = "save_view";
            FormData[39, 1] = "1";

            FormData[40, 0] = "recipientIds";
            FormData[40, 1] = "{\"recipientIds_0\":\"" + id_recepient + "\"}";

            Resp = SendDoc(MainUrl + "/document.card.php?do_create_pages=1&category=1&DNSID=" + valDNSID + "&DNSID=" + valDNSID, FormData, out stats);
            string[] tt = httpLocation.Split('&');
            string PageGen = tt[tt.Length - 1].Split('=')[1];
            Resp = Get(MainUrl + "/web/?url=document/page/generationStatus&wid=" + PageGen + "&DNSID=" + valDNSID, out stats);

            json = JObject.Parse(Resp);
            if (json["state"].ToString().ToLower() != "true")
            {
                string errors = "";
                foreach (JToken j in (JArray)json["data"]["errors"])
                    errors += j.ToString() + ";";
                return errors;
            }

            return "ok";
        }
        catch
        {
            return "error";
        }
    }
    public string GetUsers(string FindUserText, int offset = 0)
    {
        string stats = "";
        string RESP = Get(MainUrl + "/getusers.php?=&filter=1&fio=" + FindUserText + "&offset=" + offset.ToString() + "&no=10&var=g_suggests[3]&restrict=0&only_connected=0", out stats);
        RESP = RESP.Replace("if (g_suggests[3].canLoadUsers(10)) {", "").Replace("g_suggests[3].gotUserList(", "").Replace(", true);", "").Replace(", false);", "").Trim();
        RESP = RESP.Remove(RESP.Length - 1, 1);
        return (RESP);
    }

    public void GetMSED_idRecipient(string rscpt)
    {
        id_recepient = "";
        name_recepient = "";
        SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["portalFGU59ConnectionString"].ToString());
        SqlCommand myCommand = new SqlCommand("select msed_id, msed_name from MSEDInfo where oms = '" + rscpt + "'", myConnection);
        myConnection.Open();
        SqlDataReader read = myCommand.ExecuteReader();
        if (read.HasRows)
        {
            read.Read();
            id_recepient = read["msed_id"].ToString();
            name_recepient = read["msed_name"].ToString();
            myConnection.Close();
        }
        myConnection.Close();
    }

}


